/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Replay implements org.apache.thrift.TBase<Replay, Replay._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Replay");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("created_ts", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UPLOADER_FIELD_DESC = new org.apache.thrift.protocol.TField("uploader", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReplayStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReplayTupleSchemeFactory());
  }

  public String id; // optional
  public long created_ts; // optional
  public String title; // optional
  public String description; // optional
  public thrift.User uploader; // optional
  /**
   * 
   * @see GameType
   */
  public GameType gameType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATED_TS((short)2, "created_ts"),
    TITLE((short)3, "title"),
    DESCRIPTION((short)4, "description"),
    UPLOADER((short)5, "uploader"),
    /**
     * 
     * @see GameType
     */
    GAME_TYPE((short)6, "gameType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATED_TS
          return CREATED_TS;
        case 3: // TITLE
          return TITLE;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // UPLOADER
          return UPLOADER;
        case 6: // GAME_TYPE
          return GAME_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATED_TS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.CREATED_TS,_Fields.TITLE,_Fields.DESCRIPTION,_Fields.UPLOADER,_Fields.GAME_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_TS, new org.apache.thrift.meta_data.FieldMetaData("created_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOADER, new org.apache.thrift.meta_data.FieldMetaData("uploader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.User.class)));
    tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Replay.class, metaDataMap);
  }

  public Replay() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Replay(Replay other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.created_ts = other.created_ts;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetUploader()) {
      this.uploader = new thrift.User(other.uploader);
    }
    if (other.isSetGameType()) {
      this.gameType = other.gameType;
    }
  }

  public Replay deepCopy() {
    return new Replay(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setCreated_tsIsSet(false);
    this.created_ts = 0;
    this.title = null;
    this.description = null;
    this.uploader = null;
    this.gameType = null;
  }

  public String getId() {
    return this.id;
  }

  public Replay setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getCreated_ts() {
    return this.created_ts;
  }

  public Replay setCreated_ts(long created_ts) {
    this.created_ts = created_ts;
    setCreated_tsIsSet(true);
    return this;
  }

  public void unsetCreated_ts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_TS_ISSET_ID);
  }

  /** Returns true if field created_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated_ts() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_TS_ISSET_ID);
  }

  public void setCreated_tsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_TS_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Replay setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Replay setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public thrift.User getUploader() {
    return this.uploader;
  }

  public Replay setUploader(thrift.User uploader) {
    this.uploader = uploader;
    return this;
  }

  public void unsetUploader() {
    this.uploader = null;
  }

  /** Returns true if field uploader is set (has been assigned a value) and false otherwise */
  public boolean isSetUploader() {
    return this.uploader != null;
  }

  public void setUploaderIsSet(boolean value) {
    if (!value) {
      this.uploader = null;
    }
  }

  /**
   * 
   * @see GameType
   */
  public GameType getGameType() {
    return this.gameType;
  }

  /**
   * 
   * @see GameType
   */
  public Replay setGameType(GameType gameType) {
    this.gameType = gameType;
    return this;
  }

  public void unsetGameType() {
    this.gameType = null;
  }

  /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameType() {
    return this.gameType != null;
  }

  public void setGameTypeIsSet(boolean value) {
    if (!value) {
      this.gameType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CREATED_TS:
      if (value == null) {
        unsetCreated_ts();
      } else {
        setCreated_ts((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case UPLOADER:
      if (value == null) {
        unsetUploader();
      } else {
        setUploader((thrift.User)value);
      }
      break;

    case GAME_TYPE:
      if (value == null) {
        unsetGameType();
      } else {
        setGameType((GameType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CREATED_TS:
      return Long.valueOf(getCreated_ts());

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case UPLOADER:
      return getUploader();

    case GAME_TYPE:
      return getGameType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATED_TS:
      return isSetCreated_ts();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case UPLOADER:
      return isSetUploader();
    case GAME_TYPE:
      return isSetGameType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Replay)
      return this.equals((Replay)that);
    return false;
  }

  public boolean equals(Replay that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_created_ts = true && this.isSetCreated_ts();
    boolean that_present_created_ts = true && that.isSetCreated_ts();
    if (this_present_created_ts || that_present_created_ts) {
      if (!(this_present_created_ts && that_present_created_ts))
        return false;
      if (this.created_ts != that.created_ts)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_uploader = true && this.isSetUploader();
    boolean that_present_uploader = true && that.isSetUploader();
    if (this_present_uploader || that_present_uploader) {
      if (!(this_present_uploader && that_present_uploader))
        return false;
      if (!this.uploader.equals(that.uploader))
        return false;
    }

    boolean this_present_gameType = true && this.isSetGameType();
    boolean that_present_gameType = true && that.isSetGameType();
    if (this_present_gameType || that_present_gameType) {
      if (!(this_present_gameType && that_present_gameType))
        return false;
      if (!this.gameType.equals(that.gameType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Replay other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Replay typedOther = (Replay)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated_ts()).compareTo(typedOther.isSetCreated_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created_ts, typedOther.created_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploader()).compareTo(typedOther.isSetUploader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploader, typedOther.uploader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameType()).compareTo(typedOther.isSetGameType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, typedOther.gameType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Replay(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetCreated_ts()) {
      if (!first) sb.append(", ");
      sb.append("created_ts:");
      sb.append(this.created_ts);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetUploader()) {
      if (!first) sb.append(", ");
      sb.append("uploader:");
      if (this.uploader == null) {
        sb.append("null");
      } else {
        sb.append(this.uploader);
      }
      first = false;
    }
    if (isSetGameType()) {
      if (!first) sb.append(", ");
      sb.append("gameType:");
      if (this.gameType == null) {
        sb.append("null");
      } else {
        sb.append(this.gameType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (uploader != null) {
      uploader.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplayStandardSchemeFactory implements SchemeFactory {
    public ReplayStandardScheme getScheme() {
      return new ReplayStandardScheme();
    }
  }

  private static class ReplayStandardScheme extends StandardScheme<Replay> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Replay struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created_ts = iprot.readI64();
              struct.setCreated_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPLOADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uploader = new thrift.User();
              struct.uploader.read(iprot);
              struct.setUploaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GAME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gameType = GameType.findByValue(iprot.readI32());
              struct.setGameTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Replay struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreated_ts()) {
        oprot.writeFieldBegin(CREATED_TS_FIELD_DESC);
        oprot.writeI64(struct.created_ts);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uploader != null) {
        if (struct.isSetUploader()) {
          oprot.writeFieldBegin(UPLOADER_FIELD_DESC);
          struct.uploader.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameType != null) {
        if (struct.isSetGameType()) {
          oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
          oprot.writeI32(struct.gameType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplayTupleSchemeFactory implements SchemeFactory {
    public ReplayTupleScheme getScheme() {
      return new ReplayTupleScheme();
    }
  }

  private static class ReplayTupleScheme extends TupleScheme<Replay> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Replay struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreated_ts()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetUploader()) {
        optionals.set(4);
      }
      if (struct.isSetGameType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCreated_ts()) {
        oprot.writeI64(struct.created_ts);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetUploader()) {
        struct.uploader.write(oprot);
      }
      if (struct.isSetGameType()) {
        oprot.writeI32(struct.gameType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Replay struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.created_ts = iprot.readI64();
        struct.setCreated_tsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uploader = new thrift.User();
        struct.uploader.read(iprot);
        struct.setUploaderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gameType = GameType.findByValue(iprot.readI32());
        struct.setGameTypeIsSet(true);
      }
    }
  }

}

